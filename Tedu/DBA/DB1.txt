Day01

搭建数据库服务器
数据库服务的基本使用
mysql数据类型(难点，重点)

1.关系性数据库软件
需要先设计存储结构，才能存储数据
Oracle  	甲骨文公司(跨平台，不开源)
DB2		IBM(跨平台，不开源)
SQL server 	微软(不开源，不跨平台，仅使用windowns)
MySQL  	甲骨文公司(暂时，开源，跨平台)
2.非关系性数据库软件Nosql
key values模式
redis MongoDB memcached	(开源，跨平台)

MySQL数据库
主配置文件:/etc/my.cnf
日志文件:/var/log/mysqld.log
端口号:3306
进程名:mysqld
传输协议:TCP
一、部署数据库
  1.装包(方式:官网下载，操作系统自带的)
    rpm -U(升级安装，覆盖低版本)
    mysql-community-server-5.7.17-1.e	//服务端的主包
    mysql-community-client-5.7.17-1.e	//客户端提供一些命令等的包
  2.配置
    ss、systemctl、ps	//查看进程服务和端口
    ps -C 服务名	//单独查看某一服务是否运行
  3.起服务
二、数据库基本管理
  1.数据库连接方式
    1)查找登陆密码，在日志文件中
    2)命令行连接、软件连接、web页面连接
    mysql -h登陆方式 -u用户名 -p'密码'	//登陆格式
    3)修改初始密码才可以操作数据库
    alter user root@"localhost" identified by "新密码(8位以上且符合4/4原则)"；
  2.设置密码策略
    1)查找密码策略:
	%表示通配
	show global variables like "%password%";
    2)修改密码策略
	validate_password_policy等级
	0 or LOW		//只验证长度
	1 or MEDIUM(默认)	//长度;数字;大小写;特殊字符
	2 or STRONG		//长度;数字;大小写;特殊字符;字典文件
	validate_password_length=密码长度
	配置文件中添加表示永久改，set只能临时修改
  3.管理环境
    基本注意事项：
	-操作指令不区分大小写（密码，变量除外）
	-每条SQL指令以；结尾
	-不支持Tab键
	-\c不执行当前指令
    常用的SQL操作指令：
      -DDL数据定义语言(create、alter、drop)
      -DML数据操作语言(insert、update、delete)
      -DCL数据控制语言(grant、revoke)
      -DTL数据事物语言(commit、rollback、savepoint)
三、基本操作
  1.库管理命令
    1)库 类似文件夹
    -show databases;	//显示已有的库
    -use 库名；		//切换库
    -select database();	//显示当前所在的库
    -create database 库名;	//创建新库
    -show tables;		//显示已有的表
    -drop database 库名;	//删除库
    2)数据库命名规则
      -可以使用数字/字母/下划线，但不能纯数字
      -区分大小写，具有唯一性
      -不可使用指令关键字、特殊字符
  2.表管理命令
    1)新建表
    -create table 库名.表名(字段名1 字段类型(宽度) 约束条件,....)
    2)表 类似文件
    -desc 表名;	//查看表结构
    -select * from 表名;	//查看表记录
    -drop table 表名;	//删除表
    3)记录 类似文件里的行
    -insert into 表名 values(值列表);	//插入表记录
    -update 表名 set 字段=值;	//修改表记录，加条件用where
    -delete from 表名;		//删除表记录
  3.注意事项
  -MySQL数据库默认不支持中文，需修改default charset=utf8;
四、MySQL数据类型
  1.数值类型
   1)整数型:默认使用有符号类型，加unsigned使用无符号类型
   2)浮点型
   	-定义格式:float(总宽度，小数位数)
   	-当字段值与类型不匹配时，字段值作为0处理
   	-数值不在范围，仅保存最大/最小值
  2.字符类型
  定长：char(字符数)
    -最大长度255字符
    -不够指定字符数时在右边用空格补齐
    -字符数段超出时，无法写入数据
  变长：varchar(字符数)
    -按数据实际大小分配存储空间
    -字符数段超出时，无法写入数据
  大文本类型：text/blob
    -字符数大于65535存储时使用
  3.日期时间类型
  日期时间，datetime(未赋值时，默认NULL)
    -占用8个字节
    -范围：1000-01-01 00:00:00.000000
    	   ~9999-12-31 23:59:59.999999
  日期时间，timestamp(未赋值时，默认当前系统时间)
    -占用4个字节
    -范围：1970-01-01 00:00:00.000000
    	   ~2038-01-19 03:14:07.999999
  日期，date
    -占用4个字节
    -范围：0001-01-01~9999-12-31
  年份，year(输入2位时,01-69默认2001-2069)
    -占用1个字节
    -范围：1901~2155
  时间，time
    -占用3个字节
    -格式：HH:MM:SS
  4.枚举类型
   从给定值集合中选择单个值，enum
     -格式：enum(值1，值2，值N)
   从给定值集合中选择一个或多个值，set
     -格式：set(值1，值2，值N)
  5.时间函数
    now()	//获取系统当前日期和时间
    date()	//获取指定时间中的日期
    year()	//获取指定时间中的年份
    month()	//获取指定时间中的月份
    day()	//获取指定时间中的天
    time()	//获取指定时间中的时刻
    sleep(N)	//休眠N秒
    curdate()	//获取当前系统日期
    curtime()	//获取当前系统时刻 
#########################################################################
Day02

一、约束条件(如何给子段赋值的)
  -Null	//允许为空，默认设置
  -NOT NULL	//不允许为空
  -Key	//索引类型
  -Default	//设置默认值，缼省为NULL
  -Extra	//额外设置
  -null空表示为空(没有数据)，""表示0个字符，小心区分
二、修改表结构
   alter table 表名 执行动作(add,modify,change,drop,rename)
    -add 字段名 类型 约束条件 //添加新字段
       可加after 字段名;	//添加到xx之后
       或者first 字段名;	//添加到第一列
    -modify 修改字段类型，位置...
    -change 修改字段名，类型，位置...
      change 源字段名 新字段名 类型，约束条件
    -drop 字段名	//删除字段
    -rename 新表名	//修改表名
三、MySQL键值(重点)
  1.MySQL索引(类型Btree、B+tree、hash)
  索引：类似书的目录，对字段数据进行排序
    -优点：加快数据检索速度
    -缺点：占用物理空间，降低数据维护速度（增删该）
  2.键值类型
    -index	//普通索引 * 
    -unique	//唯一索引
    -fulltext	//全文索引
    -primary key	//主键 *
    -foreign key	//外键 *
  3.键值类型详解
   1)普通索引index
    使用说明
      一个表中可以有多个索引，经常查询的字段设为索引，
      标志在KEY下显示MUL,字段的值可以重复，且可以赋NULL值
    建表时指定索引
      index(字段);
    在已有的表中添加索引
      create index 索引名 on 表名(字段名);
    查看表中索引
      show index from 表名;
    删除指定索引
      drop index 索引名 on 表名;
   2)主键primary key
    注意事项：
     一个表中只能有一个primary key字段，对应的字段值不允许重复，且不能赋NULL值
     若有多个字段作为primary key，称为复合主键，必须一起创建，
     主建字段KEY标志PRI，通常与auto_increment连用(此时可以赋null,会自增)
     经常把表中的唯一标识记录的字段设置为主键字段[记录编号字段]
    建表的时候指定主建
      primary key(字段名)
    在已有的表中设置primary key
      alter table 表名 add primary key(字段名);
    删除表中primary key
      alter table 表名 drop primary key;(若有自增属性，必须先去掉)
   查看表的索引:
	show create table 表名;
   3)外键foreign key
    概念:让当前表字段的值在另一个表中字段值的范围内选择
    使用外键的条件
	-表存储引擎必须是innodb
	-字段类型要一致
	-被参照字段必须是索引类型的一种(一般是primary key)
    基本用法
    	foreign key(表A的字段名) references 表B(字段名) 
    	on update cascade on delete cascade
    实例:
    create table t1(
      id int primary key auto_increment,
      name char(5)
      )engine=innodb;
    create table t2(
      id int,
      pay float(7,2),
      foreign key(id) references t1(id) on update cascade on delete cascade
    )engine=innodb;
    删除外键
      show create table gzinfo;	//查看外键名
      alter table gzinfo drop foreign key 外键名 
    在已有表中添加外键(表1字段记录不可比表2字段记录多)
      alter table 表1 add foreign key(表1字段) references 表2(表2字段) on update cascade on delete cascade;
########################################################################
Day03

一、MySQL存储引擎
 1.MySQL体系结构：
    管理工具:各种命令的管理
    连接池:检测用户输入的信息和库中信息是否匹配，匹配进入
   SQL接口:数据库中的命令通过此接口交给mysqld去执行
    分析器:分析输入的命令是否有误
    优化器:对执行的命令进行优化
    查询缓存:空间是从系统的物理内存获取，用来存储查找过的数据
    存储引擎:服务软件自带的功能程序，处理表的处理器，不同存储引擎有不同的功能和数据存储方式
        默认存储引擎：MySQL 5.0/5.1 ----> myisam
                  MySQL 5.5/5.6 -----> innodb
    文件系统:硬盘
  2.查看存储引擎类型
    show engines;
  3.修改表的存储引擎
    修改配置文件添加:default-storage-engine=存储引擎名称
  4.存储引擎特点
  1)myisam存储引擎(查询操作多的表使用此引擎)
    表级锁：给整张表加锁
    行级锁：只给被访问的行加锁
     主要特点：-支持表级锁
     		-不支持事务、事务回滚、外键
     相关表文件：.frm(存表结构)、.MYI(存存放索引信息)、.MYD(存表中的数据)
  2)innodb存储引擎()
     事务回滚：在事务执行过程中，任何一步操作没有正确，恢复之前所有操作
     事务日志文件：记录对innodb存储引擎的表执行的操作
     主要特点：-支持行级锁
     		-支持事务、事务回滚、外键
     相关表文件：.frm(存表结构)、.ibd(存索引和数据)、ibdata1、
     		ib_logfile0、ib_logfile1
  3)MySQL锁机制
    锁粒度
      -表级锁：一次直接对整张表进行加锁
      -行级锁：只锁定某一行
      -页级锁：对整个页面(MySQL管理数据的基本存储单位)进行加锁
    锁类型
      -读锁(共享锁)：支持并发读
      -写锁(互斥锁、排他锁)：独占锁，上锁期间其他线程不能读写
    查看当前锁状态
      show status like "%lock%";	//lock锁
   4)事务特性(ACID)
    Atomic：原子性
    	-事务的整个操作是一个整体，不可分割
    Consistency：一致性
    	-事务操作前后，表中的记录没有变化
    Isolation：隔离性
    	-事务操作是相互隔离不受影响的
    Durability：持久性
    	-数据一旦提交，不可改变，永久改变表数据
   5)将自动提交改为手动提交，可以数据回滚
     show variables like "autocommit";	//查看提交状态(默认自动)
     set autocommit=off;		//关闭自动提交
     rollback;		//回滚数据
     commit;		//提交数据
   6)查询操作多的表使用myisam存储引擎，节省资源
     写操作多的表使用innodb存储引擎，并发访问量大
二、数据导入导出(默认检索目录/var/lib/mysql-files/下)
  show variables like "secure_file_priv";	//查询默认检索目录
  永久修改检索目录：
	  vim /etc/my.cnf
	  secure_file_priv="目录名"
	  mkdir 目录
	  chown mysql 目录名
        systemctl restart mysqld
  1)数据导入
   * 数据库中执行系统命令加system即可 *
   基本用法
     -load data infile "目录名/文件名"
     into table 表名
     fields terminated by "分隔符"
     lines terminated by "\n";
   注意事项
     -字段分隔符要与文件内一致
     -指定导入文件的绝对路径
     -导入数据的表字段类型要与文件字段匹配
     -禁用Selinux保护机制
  2)数据导出
   基本用法
     -SQL查询(select...limit限制行数) into outfile "目录名/文件名" 
     fields terminated by "分隔符"
     lines terminated by "\n";	//默认\n
   注意事项
     -导出的内容由SQL查询语句决定
     -导出的是表中的记录，不包括字段名
     -禁用SElinux  
三、管理表记录
  1.增加记录
    格式1:添加1条记录,给所有字段赋值
      insert into 表名 values(字段值列表);
    格式2:添加N条记录,给所有字段赋值
      insert into 表名 values(字段值列表),()(),...;
    格式3:添加1条记录,给指定字段赋值
      insert into 表名(字段名列表) values(字段值列表);
    格式4:添加N条记录,给指定字段赋值
      insert into 表名(字段名列表) values(字段值列表),(),(),...;
    注意事项:
      -字段值要与字段类型相匹配
      -对于字符类型的字段,要用双或单引号括起来
      -依次给出所有字段赋值时,字段名可以省略
      -只给一部分字段赋值时,必须明确写出对应的字段名称
  2.查询记录
    格式1:select 字段1,...,字段N from 表名;
    格式2:select *(所有) from 表名 where 条件表达式;
    注意事项:指定表名时,可以用库名.表名的形式
  3.更新记录
    格式1,更新表内字段的所有记录
      update 表名 set 字段1=字段1值,.....;
    格式2,只更新符合条件对应的部分记录
      update 表名 set 字段1=字段1值,.... where 条件表达式;
    注意事项:
      -字段值要与字段类型相匹配
      -对于字符类型的字段,要用双或单引号括起来
      -若不使用where限定条件,会更新所有记录
      -限定条件时,只更新匹配条件的记录
  4.删除记录
    格式1,仅删除符合条件的记录
      delete from 表名 where 条件表达式;
    格式2,删除所有记录
      delete from 表名;
四、匹配条件
  1.基本匹配条件
    1)数值:=,!=,>,>=,<,<=
    2)字符:=,!=,is null(匹配空),is not null(非空)
    3)逻辑:or,and,!(逻辑非),()(提高优先级)
    4)范围:in (值列表)	//在...里...
    	  not in (值列表)	//不在...里...
    	  between 数字1 and 数字2 	//在...之间...
    	  distinct 字段名	//去重显示.
    	  特别点:select distinct 字段名 from 表名;
  2.高级匹配条件
    1)模糊查询
     -where 字段名 like '通配符'
       -_匹配单个字符,%匹配多个字符
    2)正则表达式
     -where 字段名 regexp '正则表达式'
       -正则元字符^,$,.,[],*,|
    3)四则运算(字段必须是数值类型)
       +,-,*,/,%
       例:select uid,gid,uid+gid (as可省略) xxx[将uid+gid字段名改为xxx] from 表名 [where ...];
  3.操作查询结果
    1)聚集函数
     -avg(字段名)	//统计字段平均值
     -sum(字段名)	//统计字段之和
     -min(字段名)	//统计字段最小值
     -max(字段名)	//统计字段最大值
     -count(字段名)	//统计字段值个数
   2)查询结果排序
     -SQL查询
     order by 字段名(通常是数值类型字段);	//后跟asc升序,跟desc降序排列
   3)查询结果分组
    -SQL查询
    group by 字段名(通常是字符类型字段);
   4)查询结果过滤
    -SQL查询 having 条件表达式;
    -SQL查询 where 条件 having 条件表达式;
    -SQL查询 group by 字段名 having 条件表达式;
   5)限制查询结果限制行数
    -SQL查询 limit N;	//显示查询结果前N条记录
    -SQL查询 limit N,M;	//显示指定范围内的查询记录,从N开始显示M行
    -SQL查询 where 条件查询 limit 3;	//显示查询结果前3条记录
    -SQL查询 where 条件查询 limit 3,3;	//从第四条开始,共显示3条
###################################################################
Day04

一、多表查询
  1.复制表(备份、快速建立新表)
   将源表复制为新表
    create table 新表名 select * from 源表名;
    *注意：复制的新表不会带索引过去，查询条件可以再加
    	   将查询结果调整为空，仅复制表字段
  2.多表查询
   1)多表查询，也称连接查询
     -将2个或2个以上的表按某个条件连接起来，从中选取需要的数据
     -当多表中存在相同意义的字段(字段名可以不同)时，可以通过该字段连接多表
   2)方法1：
      -以下格式查询结果叫笛卡尔集
       查询结果的的总条目数=(表a的记录数 X 表b的记录数)
     select 字段名列表 from 表a,表b;
     -格式
     select 字段名列表 from 表a,表b where 条件;
   3)方法2：where子查询
     -把内层查询结果作为外层查询的条件
     -格式
     select 字段名列表 from 表名
     where 条件
     (select 字段名列表 from 表名 where 条件);
   4)方法3：查询两个表中相同或不同记录使用
    -左连接查询(以表a为主查询)
     表a记录<表b记录
     格式:select 字段名列表 from 表a left join 表b on 条件表达式;
    -右连接查询(以表b为主，条件不成立时用null显示出来)
     表a记录<表b记录
     格式:格式:select 字段名列表 from 表a right join 表b on 条件表达式;
二、MySQL管理工具
  1.常见的mysql管理工具
   Mysql			命令行	跨平台		Mysql官方bundle包自带
   Mysql-Workbench	图形	跨平台		Mysql官方提供
   Mysql-Front		图形	Windows 	开源，轻量级客户端软件
   PhpMyAdmin		浏览器	跨平台		开源，需lamp平台
   Navicat			图形	Windows	专业，功能强大，商业版
  2.部署PhpMyAdmin
    1)部署LAMP环境
    2)安装phpmyadmin
    3)修改文件所有者和所属组	//安全
    3)修改配置文件config.inc.php
    4)客户端访问
三、用户授权及撤销
  1.密码恢复和设置(系统管理员才有权限)
    1)停止mysqld服务
    2)修改配置文件跳过授权登陆skip-grant-tables
    3)登陆mysql重置密码user表中authentication_string
    4)保存退出flush privileges;
  设置修改密码:
    -mysqladm -uroot -p旧密码 password '新密码'	//命令行修改
    -alter user 用户@"登陆地址" identified by '新密码';	//数据库中修改
    -update mysql.user set authentication_string=password(新密码) where 条件;
  重设用户密码
     //授权用户连接后自己修改密码
    set password = password("新密码");
     //管理员重置授权用户连接密码
    set password for 用户名@'客户端地址'=password("新密码");
  2.创建授权(在数据服务器上添加可以连接数据库服务器的用户并设置访问权限及密码)
    1)命令格式
     grant 权限列表(all所有权限,usage无权限) on 数据库.表(*所有) to 用户@"客户端地址" identified by '新密码';	
     //加with grant option表示此用户有授权权限
     //权限列表可以指定字段
  2)mysql授权库和表信息
     -user表,存储授权用户的访问权限
     -db表,存储授权用户对数据库的访问权限
     -tables_priv表,存储授权用户对表的访问权限
     -columns_priv表,存储授权用户对字段的访问权限
   查看权限
     select * from mysql.user;	//从中查看用户及权限
     show grants for 用户@"登陆地址";	//查询用户授权的权限
     show grants;	//查询当前用户的权限
     select user();	//查看当前登陆用户和登陆地址
  3.撤销授权
    revoke 权限列表 on 库名.表名 from 用户名@"客户端地址";
  4.删除授权用户
   1)删除表记录
     delete from mysql.user where user="用户名";
     flush privileges;	//使删除生效
   2)命令删除
     drop user 用户名@"客户端地址";
#########################################################################
Day05

数据备份的方式
  -物理备份：冷备 cp  tar ...
  -逻辑备份：mysqldump  mysql
数据备份策略
  -完全备份：备份所有数据
  -增量备份：备份上次备份后，所有新产生的数据
  -差异备份：备份完全备份后，所有新产生的数据
数据备份需考虑因素
  -数据备份频率
  -备份时间
  
innodb数据会有自己的日志文件，备份时需一同备份
myisam则没有

一、完全备份
  1.物理备份
    cp -rp /var/lib/mysql /备份目录
    tar -zcf xxx.tar.gz /var/lib/mysql
    物理恢复
    cp -rp /备份目录 /var/lib/mysql
    tar -xf xxx.tar.gz -C /var/lib/mysql
  2.逻辑备份
    mysqldump -uroot -p密码 库名 > /备份路径/xxx.sql
    逻辑恢复
    mysql -uroot -p密码 库名 < /备份路径/xxx.sql
    库名表示方式
    *--all-databases或-A		所有库
     *数据库名				单个库
     *数据库名 表名			单张表
    *-B 数据库1 数据库2		多个库
     注意事项：无论备份或恢复，都要验证用户权限
     	       备份所有库和多个库时可以不写库名
  3.缺点：
    	-备份，恢复时会锁表
    	-两次备份之间的数据无记录   	       
二、数据增量备份
 1.binlog日志(二进制日志)：记录所有更改数据的操作
   配置:log_bin[=目录/文件名]
      server_id=数字
      max_binlog_size=数字m(默认500m)
  2.使用binlog日志
    1)启用binlog日志
    	配置文件中添加/etc/my.cnf
   	log_bin[=目录/文件名]	//自定义日志文件目录和名字，需创建并修改权限
      server_id=数字(1-255)
      max_binlog_size=数字m(默认500m)
    好处:-记录除查询之外的所有SQL命令
         -可用于数据恢复
         -配置mysql主从同步的必要条件
   2)binlog相关文件
     -主机名-bin.index	//记录已有日志文件名
     -主机名-bin.000001	//第一个二进制日志
     -......
    显示当前数据库服务器正在使用的bin_log正在使用的日志文件名:show master status;
    手动生成新的日志文件方法
      -重起mysql服务
      -执行SQL操作flush logs
    -mysqldump ... --flush-logs 库 > 路径
    -mysql -uroot -p密码 -e 'flush logs'
    3)清理binlog日志
      -purge master logs to "binlog文件名";	//删除指定编号之前的文件
      -reset master;	//删除所有日志,重新创建新日志(用于完全备份以后)
    4)分析binlog日志
      日志的三种记录格式
      配置文件添加binlog_format=xxx
        -statement:每一条修改数据的sql命令都会记录在日志中
        -row:不记录sql语句上下文相关信息,仅保存哪条记录被修改
        -mixed:以上两种格式的混合使用
      使用mysqlbinlog工具(按时间点和偏移量记录)
        格式:mysqlbinlog [选项] 日志文件名
        常见选项:
        	--start/stop-datetime="yyyy-mm-dd hh:mm:ss"  //指定起始时间
        	--start/stop-position=数字	//指定起始偏移量
    5)利用binlog恢复数据
      使用mysqlbinlog查询时间点和偏移量
      管道给mysql去执行命令恢复数据
三、innobackupex备份/恢复
 1.mysql备份工具
   *物理备份缺点
     -跨平台性差
     -备份时间长、冗余备份、浪费存储空间
  *mysqldump逻辑备份缺点
     -效率低,备份和还原速度慢
     -备份过程中，数据插入和更新操作会被挂起
  *binlog日志备份
     -恢复需人工寻找节点，不方便
  *XtraBackup工具（一款强大的在线热备份工具）
     -备份过程中不锁表，适合生产环境
     -由专业组织percona提供
     主要组件包括
     	-xtrabackup：c程序，支持innodb/xtradb
     	-innobackupex：以perl脚本封装xtrabackup，支持myisam
  2.安装percona，用法
    备份格式：innobackupex [选项] /目录(自动创建)
 3.innobackupex选项
 	--host	主机名
 	--user	用户名
 	--port	端口号
 	--password	密码
 	--databases	数据库名
 		="库名"	单个库
 		="库1 库2"	多个库
 		=库.表"	单个表
 	--no-timestamp	不用系统时间做子目录名
 4.innobk应用	
    *数据的完全备份
     innobackupex --user=root --password=123456 /allbak --no-timestamp
    *数据的完全恢复(要求数据库目录必须为空，此软件特性)
     systemctl stop mysqld
     rm -rf /var/lib/mysql/*
     innobackupex --apply-log /allbak	//回滚日志
     innobackupex --copy-back /allbak	//恢复数据
     chown -R mysql.mysql /var/lib/mysql
    *数据的增量备份
     innobackupex --user=root --password=123456 --incremental /新目录
     --incremental-basedir=/上次备份目录 --no-timestamp
    *数据的增量恢复
   -lsn:事务日志序列号
      1)准备恢复数据
      innobackupex --apply-log --redo-only /fullbak
      2)合并日志
      innobackupex --apply-log --redo-only /fullbak --incremental-dir=/增量备份1
      innobackupex --apply-log --redo-only /fullbak --incremental-dir=/增量备份2
     3)拷贝备份数据到数据库目录下
      innobackupex --copy-back /fullbak
      4)修改数据库目录文件的所有者和组mysql
      chown -R mysql.mysql /var/lib/mysql
      5)启动数据库服务
      systemctl restart mysqld
      6)查看数据
    *恢复完全备份中的某张表
    alter table 表名 discard tablespace;	//删除原表空间文件(.ibd)
    innobackupex --user=root --password=123456 --apply-log --export /备份目录	//导出表日志文件
    cp /备份目录/库/文件 /var/lib/mysql/库	//拷贝表信息文件
    修改所有者
    alter table 表名 import tablespace;	//导入表空间
 
Day1-5
搭建数据库服务器mysql
服务的基本使用
mysql数据类型  约束条件  修改表结构
mysql键值 index  primary key  foreign key
mysql存储引擎 myisam innodb  事务  事务的特性  锁类型  锁粒度
管理表记录  select insert update delete  匹配条件
批量处理数据  数据导入/导出
用户授权  grant  权限撤销  revoke   授权库mysql
数据的备份与恢复  
完全备份 mysqldump(备份锁表) innobackupex(热备锁行)  
增量备份 innobackupex binlog


























