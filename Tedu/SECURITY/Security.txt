Day01

一、Linux基本防护(系统管理部分知识的应用)
 用户账号安全
 cal	//查看日历
 1.设置账号有效期
   chage工具
     -d 0 用户	//强制修改密码
     -E yyyy-mm-dd 用户	//设置用户失效日期(-1取消)
 2.账号的锁定/解锁
   passwd命令
     -l	//锁定用户
     -u	//解锁
     -S	//查看用户状态
 3.强制定期修改密码
   配置文件/etc/login.defs
     -对新建的用户有效
   用户家目录
   .bash_logout	//用户退出时进行的操作
   .bash_history	//用户操作的所有记录
   .bashrc		//别名文件
   .bash_profile	//环境变量
    将所需的软件包放入/etc/skel/目录下，后续新增的用户家目录都会有此包
 4.伪装登陆提示
   配置文件/etc/issue、/etc/issue.net
     -分别适用本地、远程登陆
     -默认会提示系统版本、内核等信息
 文件系统安全
   1.程序和服务控制
     系统服务工具：systemctl(红帽7版本)、chkconfig(红帽6版本)
     chkconfig httpd off/on	//开机不启/自启
   2.锁定/解锁保护文件
     exit3/ext4的文件属性控制
        -命令：chattr、lsattr
      +、-、=控制方式
        -属性i：不可变(immutable)
        -属性a：仅可追加(append only)
二、用户切换与提权(su 与 sudo)
 1.su切换用户身份
   -快速切换用户身份
   -普通用户执行时，需要目标用户的口令
  -root执行时，不需要口令 
   su 用户	//切换用户时，环境变量不会变,umask=002(目录),umask=113(文件)
   su - 用户	//切换用户时，环境变量会一起变,umask=022(目录),umask=133(文件)
   su		//直接切换到root用户
   su - 用户 -c 命令 	//切换到用户时，执行命令
 2.sudo提升执行权限
   2.1提权的基本用法
     -只有操作系统管理员root有提权权限
     -提权是让系统的普通用户有执行root用户命令的权限
   2.2命令格式
     -用法1:sudo 特权命令		//执行自己的特权命令
     -用法2:sudu -u 目标用户 特权命令  //执行目标用户有的特权命令
   2.3查看自己的sudo授权
    -sudo -l
   2.4配置sudo授权
     修改方法:
       -visudo
       -vim /etc/sudoers
     文件记录格式
       (加%表示用户组)用户	主机列表=(省略时表示root身份)命令列表
       tom  localhost(回环地址名字),mysql-50(hostname名字)=\
       /usr/bin/systemctl * httpd(*表示所有),\
       /usr/bin/vim /etc/httpd/conf/httpd.conf,...
       %admgrp  xxx=命令, nopasswd:all	//提权用户不用输入密码
       !/usr/bin/命令	//表示取反,此命令不可用
  3.记录提权用户的时用情况
     Defaults logfile="/var/log/sudo" //配置文件/etc/sudoers中添加
  4.别名设置
    -提高可重用性,易读性
    -简化配置,时用记录更有条理
    -配置文件中有模版,可直接修改,别名必须大写
    -用户、主机名、命令...都可以设置别名
    rpm -e --nodeps 软件包	//卸载时不卸载依赖包
三、SSH访问控制(服务常用配置项目 加深密钥对认证登陆的使用)
  1.配置文件/etc/ssh/sshd_config
  *man 5 sshd_config	//帮助,详细解释
    -Port 5156	//改用非标准端口
    -Protocol 2	//启用ssh V2版本
    -ListenAddress IP地址	//只允许指定IP连接
    -PermitRootLogin no	//禁止root登陆
    -UseDNS no	//不解析客户机地址
    -LoginGraceTime 1m	//登陆限时(密码错误后限时)
    -MaxAuthTries 3	//每次连接最多认证次数(密码)
  2.黑/白名单配置/etc/ssh/sshd_config
    -AllowUsers 用户@网段/具体IP 用户(不跟IP表示所有) //设置用户白名单
    -AllowGroups	组名	//设置组白名单
    -DenyUsers ...	//设置用户黑名单
    -DenyGroups ...	//设置组黑名单
  3.口令认证登陆(用户名 登陆系统密码)默认方式
    PasswordAuthentication yes
    密钥对认证登陆
    PubkeyAuthentication yes
    AuthorizedKeysFile      .ssh/authorized_keys(公钥文件)
    将私钥传给其他主机也可以免密登陆,注意私钥权限755,公钥的影响
    ssh-add //密钥未生成成功时
四、SELinux安全防护
 1.1什么是SELinux
   Security-Enhanced Linux
      -一套强化Linux安全的扩展模块
      -美国国家安全局主导开发
    SELinux的运作机制
      -集成到Linux内核(2.6及以上)
      -操作系统提供可定制的策略、管理工具
  1.2.红帽的SELinux策略集
    SELINUXTYPE=targeted		//保护常用的服务，默认状态
    sestatus	//查看当前selinux状态
  1.3.模式控制
    1.3.1修改kernel启动参数
      -添加selinux=0 禁用
      -添加enforcing=0设置为允许模式
    1.3.2修改文件/etc/selinux/config
      -设置SELINUX=disable 禁用
      -设置SELINUX=permissive 宽松模式
      -设置SELINUX=enforcing 强制模式
    1.3.3临时修改(不可修改disabled状态)
     setenforce = 1	//强制模式
     setenforce = 0	//宽松模式
     getenforce		//查看
 2.SELinux策略设置
    2.1查看安全上下文
       -为文件/目录/设备标记访问控制属性
       -属性构成
         用户:角色:访问类型:选项...
    ls -Z	//查看文件/目录上下文属性
    ps -Z 	//查看服务上下文属性
    2.2修改安全上下文
      一般操作规律
        -移动的文件，原有的上下文属性不变
        -复制的文件，自动继承目标位置的上下文
        -新建的文档，自动继承父目录的访问类型
      修改访问类型
       chcon -t 访问类型 文件路径	//指定访问类型
       chcon -R -t 访问类型 目录	//递归修改
      重置安全上下文
        使用restorecon工具
           -恢复为所在位置的默认上下文属性
        -R 目录  	//递归修改
     2.3调整SELinux布尔值
       使用getsebool查看
       getsebool -a	//可列出所有布尔值
       使用setsebool设置
       setsebool -P ...	//永久更改
    2.4查看selinux报错信息(里面有解决办法)
     grep -i 'setroubleshoot' /var/log/messages | taile -1
 3.ftp命令行操作
    yum -y install ftp
    ftp 目标IP 	//进入ftp命令模式
    ls	//查看ftp目录下文件
    cd 目录	//切换ftp目录
    lcd 目录	//切换当前目录
    get 文件	//下载文件
    put 文件	//上传文件
  -SELinux以下两相布尔值会影响ftp下载上传
    allow_ftpd_anon_write 
    allow_ftpd_full_access
##########################################################################
Day02

一、GPG数据加密与解密 和 数字签名
 1.加密和解密
   发送方：明文->密文(加密的)
   接收方：密文->明文(解密的)
   1.1加密的目的及方式
     确保数据的机密性
      -对称加密：加密/解密用同一个密钥
      -非对称加密：加密/解密用不同的密钥(公钥，私钥)
     保护信息的完整性
      -信息摘要：基于输入的信息生成长度较短、位数固定的散列值
   1.2常见的加密算法
     对称加密：DES、AES
     非对称加密：RSA、DSA
    Hash散列技术，用于信息摘要：MDB、SHA(完整性校验)
  1.3GPG对称加密/解密
    gpg --help	//帮助
      -加密操作：gpg -c 文件
      -解密操作：gpg -d 文件
  1.4GPG非对称加密
    userb接收方：
      -创建密钥对：gpg --gen-key
      -导出公钥：gpg --export -a > /tmp/userb.pub 
      -使用私钥解密文件：gpg -d 加密文件 > 文件	//需输入创建密钥时的密码
    usera发送方：
      -导入公钥：gpg --import 公钥文件
      -使用公钥加密文件： gpg -e -r 创建公钥时真实用户名 文件
  1.5GPG做数字签名
    userb用户使用私钥做数字签名
      gpg -b 文件 	//给文件签名，生成.sig文件，需要私钥密码
       将原文件和.sig文件一起传给对方
    usera用户使用导入的公钥验证签名
      gpg --verify 文件.sig	//若原文件被改变，会提示文件损坏  
二、AIDE入侵检测系统
 1.装包aide
 2.修改配置文件/etc/aide.conf
   @@define DBDIR /var/lib/aide         //检测信息目录
   @@define LOGDIR /var/log/aide        //日志目录
   database=file:@@{DBDIR}/aide.db.gz	//用于对比的文件
   database_out=file:@@{DBDIR}/aide.db.new.gz  //检测到数据的存储文件名
   //一下内容为可以检查的项目（权限，用户，组，大小，哈希值等）
   #p:      permissions
   #i:      inode:
   #n:      number of links
   #u:      user
   #g:      group
   #s:      size
   #md5:    md5 checksum
   #sha1:   sha1 checksum
   #sha256:        sha256 checksum  
   FIPSR =  p+n+u+g+s+acl+selinux+xattrs+sha256 //别名,存储一系列命令
    !表示不检测此目录
    实验:注释99-312行,添加检测目录和方法/root/ FIPSR
 3.初始化检查
    aide --init	//检测信息放入/var/lib/aide/aide.db.new.gz
    vim命令存储文件/root/.viminfo
     历史命令存储文件/root/.bash_history
 4.备份初始检测信息
    mv /var/lib/aide/aide.db.new.gz /tmp
    cp /tmp/aide.db.new.gz /var/lib/aide/aide.db.gz  //拷贝回来重命名,用于对比
 5.执行入侵检测
    aide --check	//与初始aide.db.gz文件做对比,显示增,删,改的变化
三、扫描与抓包
 1.安全分析概述
   1.1以获取一些公开/非公开信息为目的
     -检测潜在的风险
     -查找可攻击的目标
     -收集设备/主机/系统/软件信息
     -发现可利用的安全漏洞
   1.2扫描方式
     -Scan,主动探测
     -Sniff,被动监听/嗅探
     -Capture,数据包捕获(抓包)
   1.3常见的工具
     -扫描器:NMAP
     -协议分析:tcpdump、WireShark
 2.NMAP扫描(man nmap帮助)
   2.1装包nmap
   2.2支持多种探测技术
    -ping扫描
      -多端口扫描
    -TCP/IP指纹校验
   2.3基本用法
     -nmap [扫描类型] [选项] <扫描目标。。。>
     2.3.1常用扫描类型
      -sS,TCP SYN扫描(半开)	//三次握手只进行2次，最后一次不进行
      -sT,TCP 连接扫描(全开)	//正常进行三次握手
      -sU,UDP扫描
      -sP,ICMP扫描	//可以ping多台或者网段
      -A,目标系统全面分析
     2.3.2选项
       -p	//指定端口
       -n	//不做DNS解析
    nfs传输数据服务rpcbind
作业：编写脚本要求：检查任意主机，任意服务是否运行
/root/bin/check_ser.sh  192.168.4.52 80
 3.网络抓包工具
  3.1tcpdump抓包命令(man tcpdump)
    一款提前tcp数据包的命令行工具
    基本用法：tcpdump [选项] [过滤条件]
    常见监控选项
     - -i,指定监控的网络接口(网卡)	
     - -c,指定抓包个数
     - -A,转换为ACSII码，以方便阅读
     - -w,将数据包信息保存到指定文件
     - -r,从指定文件读取数据包信息
   tcpdump的过滤条件
      -类型:host(主机IP)、net(网段)、port(端口)、portrange(端口范围)
      -方向:src(源地址)、dst(目标地址)
      -协议:tcp、udp、ip、wlan、arp、...(指定一个其他不会再抓)
      -多个条件组合:and、or、not
    默认只抓取eth0接口的包:tcpdump -i 网卡名称(修改抓取网卡接口)
   3.2测试抓取ftp服务包
     部署vsftpd服务，创建用户及密码，客户机利用ftp连接操作，看抓取效果
   3.3测试抓取发邮件服务包
     安装postfix软件包(发邮件)
     启动服务
     创建用户，接收邮件
     安装telnet
    helo pc254 定义主机名
    mail from:root@localhost  发件人
    rcpt to:xxx@localhost  收件人
    data  写邮件正文
     .   提交邮件
    quit 断开连接
   3.4测试抓取收邮件服务包
     安装dovecot
     启动服务，查看服务端口110
     修改配置文件:
     /etc/postfix/main.cf
       home_mailbox = Maildir/
     /etc/dovecot/conf.d/10-auth.conf
     	disable_plaintext_auth = no
     /etc/dovecot/conf.d/10-mail.conf
     	mail_location = maildir:~/Maildir
     重起postfix、dovecot服务	 
     使用telnet连接访问
    user 用户
    pass 密码
    list	//邮件列表
    retr 1	//查看邮件内容
 4.WireShark协议分析器(图形界面)
   一款与tcpdump类似的抓包工具
  软件包wireshark、wireshark-gnome
  显示OSI4层协议中每层的信息
#######################################################################
Day04

一、系统审计
  1.审计
    1.1什么是审计
     基于事先配置的规则生成日志，记录可能发生再系统上的事件
     审计不会为系统提供额外的安全保护，但她会发现并记录违反安全策略的人及其对应的行为
     审计能够记录的日志内容：
       -日期与事件、事件结果
       -触发事件的用户
       -所有认证机制的使用都可以被记录，如ssh等
       -对关键数据文件的修改行为等
    1.2审计的案例
      -监控文件访问
      -监控系统调用
      -记录用户运行的命令
      -审计可以监控网络访问行为
    -ausearch工具，可以根据条件过滤审计日志
    -aureport工具，可以生成审计报告
  2.部署audit
    2.1装包audit，起服务auditd
    2.2主配置文件/etc/audit/auditd.conf
        日志文件/var/log/audit/audit.log
    2.3命令auditctl
     auditctl -h	//命令帮助
     auditctl -s	//查询审计状态
     auditctl -l	//查看审计规则
     auditctl -D 	//删除所有审计规则
      2.3.1定义临时规则
      auditctl -w path -p permission -k key_name	//命令格式
       -path为需要审计的文件或目录
       -permission权限可以是r,w,x,a(文件或目录的属性发生变化)
       -key_name为可选项，方便识别哪些规则生成特定的日志项
      ausearch -k key_name -i 	//根据key搜索日志，-i为交互式操作
      2.3.2定义永久规则
        将auditctl -l查看到的规则，写入配置文件/etc/audit/rules.d/audit.rules
      echo `auditctl -l` >> /etc/audit/rules.d/audit.rules
  3.审计日志
    /usr/share/doc/audit-版本号/rules/*.rules	//存放各种规则模版
    /usr/include	//软件的头文件和库文件存放处
    日志详解
    -type为类型
    -msg为(time_stamp:ID),时间是date+%s
    -arch=c000003e，代表x86_64(16进制)
    -success=yes/no,事件是否成功
    -a0-a3是程序调用时前4个参数，16进制编码了
    -ppid父进程ID，如bash，pid进程ID，如cat命令
    -auid是审核用户的id，su - test，依然可以追踪su前的账户
    -uid，gid用户与组
    -tty：从哪个终端执行的命令
    -comm="cat"	用户在命令执行的指令
    -exe="/bin/cat"  实际程序的路径
    -key="sshd_config"  管理员定义的策略关键字key
    -type=CWD   用来记录当前工作目录
      -cwd="/home/username"
    -type=PATH
      -ouid(owner's user id)  对象所有者id
      -guid(owner's groupid)  对象所有组id
二、服务安全
 1.Nginx安全
   1.1删除不需要的模块
    --with...	//添加模块
    --without...	//移除模块	
    nginx -t 	//检测配置文件语法格式是否有误
     自动索引功能(autoindex)：当访问时首页不存在时，会显示目录下所有文件
    --without-autoindex-module	//移除不需要模块
   1.2隐藏和修改版本号
    server_tokens off;	//配置文件中添加，隐藏服务软件版本信息
    curl --help
    curl -I xxx	//显示版本信息
    curl -i xxx	//显示http头部信息
    curl -X 请求方式	
   1.3限制并发(限制某1台客户端同时访问的请求个数)
     ngx_http_limit_req_module	//默认模块，可以降低DDos攻击风险
     配置功能：
      -语法：http{limit_req_zone $binary-remote_addr zone=one:10m rate=1r/s;}
     	    server{limit_req zone=one burst=5;}
      -获取客户端IP地址$binary-remote_addr
      -将客户端IP信息存储名称定义为one，空间10M
    -1M可以存储8千个IP信息，10M存8万个主机IP信息
    -rate表示每秒处理几个请求，多余的放入漏斗
    -burst设置漏斗个数，超出会报错
   1.4拒绝非法请求
     常见的http请求方法(一般只需要get和post)
       请求方法	功能描述
       GET		请求指定的页面信息，并返回实体主体
       HEAD		类似get请求，只不过返回的响应中没有具体的内容，用于获取报头
       POST		向指定自源提交数据进行处理请求(例如提交表单或上传文件)
       DELETE	请求服务器删除指定的页面
       PUT		向服务特定位置上传资料
         ...	
      禁用其他方法，仅允许(get|post)
     server{
          if ($request_method !~ ^(GET|POST)$){
           	return 444;
          }
        }  
      测试curl -i -X 请求方法 http://.../
   1.5防止buffer溢出
   http{
     client_body_buffer_size 1K;	//缓冲区最小空间
     client_header_buffer_size 1K;	//头部信息最小空间
     client_max_body_size 16K;		//缓冲区最大空间
     large_client_header_buffers 4 4K;	//头部信息最大存储空间
     }
 2.mariadb安全
   2.1初始化安全脚本
    mysql_secure_installation	//初始化安全脚本
     -输入旧密码，配置新root密码
     -删除匿名账户
     -禁止root远程登陆
     -删除测试数据库
     -刷新权限
   2.2密码安全(明文方式保存在历史记录中)
     修改密码：命令行mysqladmin、数据库set/alter/修改表
     清空历史记录文件：/root/.bash_history、/root/.mysql_history
   2.3数据的备份和恢复
     mysqldump -uroot -p123456 库名 [表名] > 备份文件
     mysqldump -uroot -p123456 库名 [表名] < 备份文件
   2.4数据安全(默认数据是明文传输)
     -创建可以远程登陆的账户
     -使用tcpdump抓包
      tcpdump -w log -i eth0 src or dst port 3306
     -客户端远程登陆数据库，查看抓包数据
     解决办法：使用SSL或SSH加密数据传输,mysql数据加密服务(自行学习)
 3.Tomcat安全  
   3.1隐藏版本信息
     影响浏览器显示信息,修改tomcat主配置文件，隐藏版本信息
    -yum -y install java-1.8.0-openjdk-devel.x86_64  //装包
    -jar -xf /usr/local/tomcat/lib/catalina.jar  //解包
    -cd /usr/local/tomcat/lib
    -vim org/apache/catalina/util/ServerInfo.properties //修改文件
      server.info=软件名
      server.number=软件版本号
     影响命令行显示信息,修改配置文件
    curl -I localhost:8080	//会显示头部信息
    vim /usr/local/tomcat/conf/server.xml
       <Connector ... server="虚假信息" />	//隐藏头部版本信息
   3.2降权启动
     默认root用户启动tomcat服务,不安全
     useradd tomcat  //创建普通用户
     chown -R tomcat.tomcat /usr/local/tomcat  //修改文档所有者和所属组
     su - tomcat -c "/usr/local/tomcat/bin/startup.sh"  //使用tomcat启动
     设置开机自启方法
      chmod +x /etc/rc.local
      echo 'su - tomcat -c "/usr/local/tomcat/bin/startup.sh"' >> /etc/rc.local
   3.3删除默认测试页面
三、Linux安全之打补丁
 1.创建补丁文件diff
  diff制作补丁文件的原理：告诉我们怎么修改第一个文件后能得到第二个文件。
  diff命令常用选项：
	-u  输出统一内容的头部信息（打补丁使用），计算机知道是哪个文件需要修改
	-r  递归对比目录中的所有资源（可以对比目录）
	-a  所有文件视为文本（包括二进制程序）
	-N  无文件视为空文件（空文件怎么变成第二个文件）
	-N选项备注说明：
	A目录下没有txt文件，B目录下有txt文件
	diff比较两个目录时，默认会提示txt仅在B目录有（无法对比差异，修复文件）
	diff比较时使用N选项，则diff会拿B下的txt与A下的空文件对比，补丁信息会明确说明如何从空文件修改后变成txt文件，打补丁即可成功
   1.1给单个文件创建补丁文件
     使用patch命令对单文件代码打补丁
     yum -y install patch
     patch -p0 < 生成的补丁文件  //-p0(p表示路径0表示打包路径和补丁文件层级)
     patch -RE < 补丁文件	//恢复补丁前文件
   1.2给目录创建补丁文件
     diff -uraN 目录1/ 目录2/ > 补丁文件
#####################################################################
Day04

一、iptables防火墙(保护、隔离)
 1.iptables的表、链结构(记)
    4张表(iptables服务功能分类)
     raw：状态跟踪表  PEROUTING、OUTPUT
     mangle:打标记表(记录所有访问)  5条链都有
     nat：地址转换表(源地址、目标地址)  PEROUTING、POSTROUTING、OUTPUT、INPUT
     filter：过滤表(不指定时默认调用此表)  INPUT、FORWARD、OUTPUT
    5条链(ip包传输的方向)
     INPUT：匹配进入防火墙本机的ip包
     OUTPUT：匹配从防火墙本机出去的ip包
     FORWARD：匹配经过防火墙主机的ip包
     POSTROUTING：路由后处理
     PREROUTING：路由前处理
    匹配流程：顺序比对，匹配即停止(LOG除外)
 2.iptables使用
   2.1命令格式
    iptables [-t表名] 选项 [链名] [条件] [-j 目标操作]
    target(处理动作):ACCEPT、REJECT
   2.2常用选项
     查看规则
       -L	//列出说有的规则条目
       -n	//以数字形式显示地址、端口等信息
       --line-numbers	//查看规则时，前面显示序号
     添加规则
       -A	//在链末尾追加一条规则
       -I	//在链开头或指定序号插入一条规则,-I INPUT 序号
     删除规则
       -D 	//删除链内指定序号或内容的一条规则
       -F	//清空所有规则，后面跟链名只清空此链规则
     设置默认规则
       -P	//修改默认规则
     iptables-save > /etc/sysconfig/iptables  //永久保存规则
   2.3条件
   2.4基本目标操作(target)
     ACCEPT:允许通过/放行
     DROP:直接丢弃，不给任何回应
     REJECT:拒绝通过，必要时回给出提示
     LOG:记录日志，然后传给下一条规则
二、filter表控制
  1.防护类型及条件
    1.1开启内核IP转发
      echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
    或 echo 1 > /proc/sys/net/ipv4/ip_forward
    1.2基本匹配条件(!取反)
      通用匹配
         协议匹配：-p 协议名
         地址匹配：-s 源地址IP、-d 目标地址IP
         接口匹配：-i 收数据的网卡、-o 发数据的网卡
      隐含匹配(--help找帮助)
         端口匹配：--sport 源端口、--dport 目标端口
       ICMP类型匹配：--icmp-type ICMP类型(ping echo-request、pong echo-reply)
       iptables -I INPUT -p icmp --icmp-type echo-reply -j ACCEPT 
         //接收ping回应包pong
  2.扩展匹配
    基本用法
     -m 扩展模块 --扩展条件 条件值
    常见的扩展条件类型
      arp -n //显示ping过本机的mac地址
      MAC地址匹配：-m mac --mac-source MAC地址
       多端口匹配：-m multiport --sports 源端口列表
               -m multiport --dports 目标端口列表
     IP范围匹配：-m iprange --src-range IP1-IP2(完整的IP地址)
     		   -m iprange --dst-range IP1-IP2
    配置网关：systemctl stop NetworkManager
     	   route add default gw IP地址	//添加网关地址，删除用del
    52开启路由转发：sysctl -a 	//列出所有内核参数，必记
        echo "net.ipv4.ip_forward = 1" > /etc/sysctl.conf
三、nat表应用
  共享一个公网地址上网
  1.地址转换
    源地址转换(共享一个公网地址,企业常用)
    目标地址转化(发布私有网络服务)
   iptables -t nat -A POSTROUTING -s 局域网地址/24 -p tcp --dport 端口 \
   -j SNAT --to-source 网关地址	//nat源地址转换
#######################################################################
Day05

监控概述
 监控的目的
   报告系统运行状况
     -每一部分必须同时监控
     -内容包括吞吐量、反应时间、使用率等
   提前发现问题
     -进行服务器性能调整前，知道调整什么
     -找出系统的瓶颈在什么地方
 监控的资源类别
   公开数据
     -Web、FTP、SSH、数据库等应用服务
     -TCP或UDP端口
   私有数据
     -CPU、内存、磁盘、网卡流量等使用信息
     -用户、进程等运行信息
监控软件
  系统监控命令
    ps
    uptime
    free
    swapon -s
    df -h
    ifconfig
    netstat或ss
    ping
    traceroute 目标域名或IP	//路由监控，监控经过所有IP
    iostat	//查看当前系统盘读写速度
  自动化监控系统
    Cacti
       -基于SNMP协议的监控软件，强大的绘图能力
       -做报警和状态检查需手写脚本，绘图能力强大
       -插件少
    Nagios
       -基于Agent(代理程序)监控,强大的状态检查与报警机制
       -插件极多，自己写监控脚本插入到Nagios非常方便
       -支持邮件(默认)、威信、短信报警
       -没有绘图功能，配置时修改配置文件
    Zabbix
       -基于多中监控机制，支持分布式监控
Zabbix基础
  简介
   -Zabbix是一个高度集成的监控解决方案
    -可以实现企业级的开源分布式监控
   -Zabbix通过C/S模式采集监控数据
   -Zabbix通过B/S模式实现Web管理
  监控拓扑
    监控服务器(C/S模式中的S)
      -监控服务器可以通过SNMP或Agent采集数据
      -数据可以写入MySQL、Oracle等数据库中
      -服务器使用LNMP实现Web前端的管理
    被监控主机(C/S模式中的C)
      -被检控主机需要安装Agent
      -常见的网络设备一般支持SNMP
二、Zabbix监控服务
  1.部署运行环境LNMP
    安装源码nginx并运行服务
    安装mysql并运行服务
    安装php
    测试LNMP环境
  2.安装Zabbix软件
    yum -y install net-snmp-devel curl-devel libevent(自行下载安装依赖包)
    tar -xf zabbix
    ./configure --prefix=/usr/local/zabbix(不指定时，安装的命令、配置都会分开存放) --enable-server(zabbix服务程序) --enable-proxy(zabbix代理服务器) --enable-agent --with-mysql --with-net-snmp --with-libcurl(增加模块)
    make && make install
  3.初始化Zabbix
     3.1创建数据库与数据库账户
      create database zabbix character set utf8;
      grant all on zabbix.* to zabbix@"localhost" identified by 'zabbix';
      cd /root/lnmp_soft/zabbix-3.4.4/database/mysql/  //压缩包下
       需从后往前恢复,建立监控数据库
      mysql -uzabbix -pzabbix zabbix < schema.sql
      mysql -uzabbix -pzabbix zabbix < images.sql
      mysql -uzabbix -pzabbix zabbix < data.sql
     3.2创建zabbix php页面
      cd /root/lnmp_soft/zabbix-3.4.4/frontends
      cp -r php /usr/local/nginx/html/zabbix
     3.3做初始化相关配置(修改配置文件、安装依赖软件包)
      vim /etc/php.ini
         post_max_size = 16M
         max_execution_time = 300
         max_input_time = 300
         date.timezone = Asia/Shanghai
        修改后重起php-fpm
      vim /usr/local/nginx/conf/nginx.conf
       http{
        fastcgi_buffers 8 16k;  //缓存php生成的页面内容，8个16k
        fastcgi_buffer_size 32k;  //缓存php生产的头部信息
        fastcgi_connect_timeout 300;  //连接php超时时间
        fastcgi_send_timeout 300;  //发送请求的超时时间
        fastcgi_read_timeout 300;  //读取请求的超时时间
          }
        重起nginx
        安装依赖包，需自行下载
      rpm -ivh --nodeps php-bcmath-5.4.16-42.el7.x86_64.rpm php-mbstring-5.4.16-42.el7.x86_64.rpm
      yum -y install php-gd php-xml php-ldap
      systemctl restart php-fpm	//重起服务
      chmod 777 /usr/local/nginx/html/zabbix/conf  //修改配置文件权限
     3.4访问Web页面做初始化配置
       用户名：admin
       密码：zabbix
  访问管理页面
    1.修改管理员密码和语言
      界面右上交
    2.查看已有的监控模版
      配置-->模版
    3.查看已监控的主机
      配置-->主机
    4.查看监控信息
      监测中-->最新数据信息
三、运行Zabbix服务
     1.修改配置文件/usr/local/zabbix/etc/zabbix_server.conf
       LogFile=/tmp/zabbix_server.log  //日志文件
       DBName=zabbix  //库名
       DBUser=zabbix  //连接数据库的用户名
       DBPassword=zabbix  //连接数据库的密码，默认未开启
       DBHost=localhost  //默认使用本机数据库，未打开
     2.运行脚本启动服务
       cp misc/init.d/fedora/core/zabbix_server /etc/init.d/
       chmod +x /etc/init.d/zabbix_server
       sed -i '22s!/local!/local/zabbix!' /etc/init.d/zabbix_server  //修改运行命令的路径
       useradd zabbix	//创建用户
       /etc/init.d/zabbix_server start  //启动脚本
       ss -ntul | grep 10051  //zabbix_server服务端口10051
       若报错：
       vim /tmp/zabbix_server.log  //查看日志文件
       /etc/init.d/zabbix_server status  //查看状态信息
   监控远端网站服务器主机192.168.2.100
     1.配置被监控端：主机192.168.2.100
       运行zabbix_agent(10050)
       源码安装zabbix
      yum -y install gcc pcre-devel	//源码编译依赖包
      ./configure --prefix=/usr/local/zabbix --enable-agent  
      make install
      修改配置文件/usr/local/zabbix/etc/zabbix_agentd.conf
      LogFile=/tmp/zabbix_agentd.log  //日志文件
      Server=127.0.0.1,192.168.2.5  //允许访问本机服务的地址
      ServerActive=192.168.2.5：10051  //监控服务器的IP和端口
      启动服务
       cp misc/init.d/fedora/core/zabbix_agentd /etc/init.d/
       chmod +x /etc/init.d/zabbix_agentd
       sed -i '22s!/local!/local/zabbix!' /etc/init.d/zabbix_agentd  //修改运行命令的路径
       useradd zabbix	//创建用户
       /etc/init.d/zabbix_agentd start  //启动脚本
       ss -ntul | grep 10050  //zabbix_agentd服务端口10050
     2.配置监控主机：192.168.2.5
       登陆web页面
       创建监控主机：配置-->主机-->创建主机-->添加模版-->可用性zbx变绿表示已监控到
       查看监控主机：监测中-->最新数据-->主机群、主机、应用集-->显示具体监控项
四、自定义Zabbix监控项目(监控系统用户数量)
    1.配置被监控服务器
      1.1启用自定义监控项功能
        停止服务,修改配置文件/etc/init.d/zabbix_agentd stop
      Include=/usr/local/zabbix/etc/zabbix_agentd.conf.d/*.conf  //自定义监控文件路径
      UnsafeUserParameters=1  //启用自定义监控功能
      1.2定义监控命令
        vim /usr/local/zabbix/etc/zabbix_agentd.conf.d/test.conf
        UserParameter=<key>,<shell cmd>
        UserParameter=get,wc -l /etc/passwd | awk '{print $1}'
      启动服务 
      1.3查看命令输出结果
        /usr/local/zabbix/bin/zabbix_get -s IP地址 -p 10050(端口) -k get(上面定义的名字)
    2.配置监控服务器
      2.1在命令行下测试是否调用被监控的自定义命令
       /usr/local/zabbix/bin/zabbix_get -s IP地址 -p 10050(端口) -k get(定义的名字)
      2.2定义新监控模版-->创建应用集-->创建监控项目,并指定使用的监控命令
      创建名称，分组-->创建名称-->创建名称，键值(创建UserParameters时的名字)
      2.3监控主机192.168.2.100，添加自定义监控模版
      2.4查看监控信息


Day06
    
一、Zabbix报警机制
  1.概念
    自定义监控默认不会自动报警，首页也不会提示错误，需配置触发器与报警动作才可以
    1.1触发器(trigger)
      -表达式，如内存不足，用户超过多少等
      -当触发条件后，会导致一个触发事件
      -触发事件会执行某个动作    
    1.2动作(action)
      -触发器的条件被触发后行为
      -可以时发送邮件、也可以是重起某个服务等
  2.案例：
   2.1准备邮件服务和邮箱账号
     查看postfix是否安装，查看端口25
    echo 123 | mail -s 主题 收件人(zabbix)  //测试
   2.2创建触发器
     配置-->模版-->触发器-->创建触发器-->名称、严重性、表达式(监控项、功能(最新T值和N比较)、N)-->添加
     表达式
       -大多数函数使用秒作为参数，使用#代表不同含义
      -avg,count,last,min and max还数支持额外的第二个参数time_shift(时间偏移量)
       -允许从过去一段时间内引用数据
      sum(600)  //600秒内所有值的总和
      sum(#5)   //最后5个值的总和
      last(20)  //最后20秒的值
      last(#5)  //倒数第5个值
      avg(1h,1d) //一天前的一小时的平均值
   2.3创建动作
     配置-->动作-->创建动作-->名称-->操作(指定做什么)-->操作类型(发消息、执行命令)、发送用户-->添加
   2.4指定邮件服务器和收件人
     发件人：管理-->报警媒介类型-->Email-->SMTP(localhost)、端口(25)、HELO(发送邮件署名)、SMTP电邮(发件人的邮箱zabbix@localhost) -->更新
     收件人：管理-->用户-->Admin-->报警媒介-->添加(收件人邮箱)
   2.5测试配置
二、Zabbix进阶操作
  1.自动发现
    1.1概述
      -当Zabbix需要监控的蛇别越来越多，手动添加监控设备越来越有挑战
      -需要批量一次性添加一组监控主机
    1.2自动发现可以实现
      -自动发现、添加主机，自动添加主机到组
      -自动连接模版到主机，自动创建监控项目与图形等
    1.3流程
      1.3.1创建自动发现规则
       配置-->自动发现-->创建发现规则-->名称、IP范围、更新间隔、检查(类型、端口)-->添加
     IP范围：192.168.2.1-254
      1.3.2创建Action动作，说明发现主机后自动执行什么动作
       配置-->动作-->事件源：自动发现-->创建-->名称、新的触发条件(IP地址范围)-->操作-->操作细节(操作类型：添加主机到群组、与模版关联)-->添加
      1.3.3通过动作，执行添加主机，连接模版纳到主机等操作
      1.3.4架设网站服务
        -运行zabbix_agentd
        -运行httpd服务
      1.3.5查看是否监控了网站服务
  2.主被动监控
    2.1概述
      主动和被动都是对被监控端主机而言的
      默认zabbix采用的是被动监控
        -被动监控:Server向Agent发起连接，发送监控key，Agent接收请求，响应监控数据
        -主动监控:Agent向Server发起连接，Agent请求需要检测的监控项目列表，Server响应Agent发送一个items列表，Agent确认收到监控列表，TCP连接完成，会话关闭，Agent开始周期性的收集数据
      区别:Server不用每次需要数据都连接Agent，Agent会自己收集数据并处理数据，Server仅需要保存数据即可
      当监控主机达到一定量级后，Zabbix服务器会越来越慢，
      此时，可以考虑使用主动监控，释放服务器的压力
      另外，Zabbix也支持分布式监控，也是可以考虑的方案
    2.2配置客户端主动模式
      安装zabbix_agent
      修改配置文件
      vim /usr/local/zabbix/etc/zabbix_agentd.conf
        # Server=127.0.0.1	//注释，允许谁监控本机
        StartAgents=0	//禁用被动监控，不启用zabbix_agentd服务
        ServerActive=192.168.2.5  //允许监控的主机
        Hostname=ser77  //告诉监控服务器，是谁发的数据信息，一定要和zabbix服务器配置的监控主机名称一致
        RefreshActiveChecks=120  //默认120s检测一次
       启动主动监控服务
         useradd zabbix
         /usr/local/zabbix/sbin/zabbix_agentd
         ps -C zabbix_agentd  //查看进程，没有端口
         killall zabbix_agentd  //杀死进程
     2.3配置监控服务器主动模式
      2.3.1创建主动模式的监控模版
        克隆模版：配置-->模版-->Template os linux-->全克隆，修改名称
        修改监控模式：配置-->模版-->新克隆的监控项-->全选，批量更新-->更改类型为主动式,停用非主动式监控项
      2.3.2添加监控主机
        配置-->主机-->主机名称(与配置文件Hostname相同)、agented代理程序接口(IP0.0.0.0,端口0)-->添加模版
      2.4查看配置
  3.拓扑图与聚合图形 
三、监控案例(自己编写监控脚本，监控时调用监控脚本)
  1.监控Nginx
   1.1部署nginx
     yum -y install gcc pcre-devel openssl-devel zlib-devel
     ./configure --with-http_stub_status_module
     make && make install
   1.2修改配置文件/usr/local/nginx/conf/nginx.conf
     server { 
        location /status { stub_status on; }  //启用状态模块
      }
   1.3书写脚本(监控nginx状态)
     #!/bin/bash
	case $1 in
	active)
	  curl -s http://localhost/status | awk '/Active/{print $NF}';;
	waiting)
	  curl -s http://localhost/status | awk '/Waiting/{print $NF}';;
	accepts)
	  curl -s http://localhost/status | awk 'NR==3{print $2}';;
	esac
   1.4开启zabbix自定义监控
     vim /usr/local/zabbix/etc/zabbix_agentd.conf
       UnsafeUserParameters=1
       Include=/usr/local/zabbix/etc/zabbix_agentd.conf.d/*.conf
      创建自定义命令文件
       vim /usr/local/zabbix/etc/zabbix_agentd.conf.d/xxx.conf
       UserParameter=key[*],脚本 $1  //$1读取[*]里的值
   1.5测试自定义命令
     /usr/local/zabbix/bin/zabbix_get -s 127.0.0.1 -p 10050 -k key[参数]
   1.6配置监控服务器
     创建监控模版：配置-->模版-->创建模版(自定义名称)
     创建应用集(自定义名称)-->创建监控项目,并指定使用的监控命令-->创建名称，键值(创建UserParameters时的名字)、应用集


   




