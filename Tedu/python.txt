ftp://176.121.0.120
帐号：python
密码：python
教学群：552320360
石博文：shibw@tedu.cn


Python1
Day01
python版本2/3不兼容
目前大部分系统默认安装的是python2，大部分已停止更新
教学环境是python3版本

终端输入python或python3进入python的不同版本
使用quit()或exit()或ctrl+D退出

python官网：www.python.org
pycharm激活：
1.运行/root/bin/crack
  选择License Server
  输入网址：http://127.0.0.1:1017

git
安装与使用
安装：yum -y install git
查看版本信息：git --version
配置用户信息 用户名/邮箱/默认编译器
git config --global user.name ""
git config --global user.email ""
git config --global core.editor vim
git config --list	//查看更改信息
查看文件是否更改
cat  ~/.gitconfig

git分为工作区、暂存区、版本库
创建仓库
mkdir devops
cd devops
git init
在工作区创建文件
cat << eof > hello.py
> print("Hello World!")
> eof
添加文件到暂存区
git add hello.py(文件名)
git status 	//查看暂存区的状态
git status -s 	//只显示暂存区文件的变化
确认至仓库
git commit -m "描述信息"
更改文件并提交到版本库
1.git add . --> git commit -m "描述信息"
2.git commit -am "描述信息" 	//只适用于修改文件，新文件不适用
删除文件
git ls-files	//查看版本库中的文件
git rm 文件名
git commit -m "描述信息"

搭建本地gitlab服务器
安装docker容器，并下载gitlab_zh.tar镜像文件，导入
docker load < gitlab_zh.tar 
修改真迹ssh端口后，启动容器
docker run -d -h gitlab --name gitlab -p 443:443 -p 80:80 -p 22:22 --restart always -v /srv/gitlab/config:/etc/gitlab -v /srv/gitlab/logs:/var/log/gitlab -v /srv/gitlab/data gitlab_zh:latest 
-d 后台运行
-h 设置虚拟机的主机名
--name 设置容器名
-p 真机端口:容器端口，映射端口到真机中
--restart always  出现问题时重新启动服务
-v 真机路径:容器路径，映射目录到容器中

启动后直接访问虚拟机IP访问(出现无法连接500/502等会再刷新)
默认用户root，直接修改密码（不低于8位）
登陆后创建项目、用户、组等

通过http方式连接远程仓库
git remote rename origin old-origin	//默认远程仓库origin，重复的话使用此命令改名
git remote add origin http://192.168.4.1/nsd1809/core_py.git  //连接远程仓库
git push -u origin --all   //将本地代码推送至远程仓库，-u仓库名，--all全部代码

git remote add	//添加远程仓库
git remote rename	//重命名远程仓库
git remote remove	//删除远程仓库

使用ssh方式免密钥登陆
真机生成密钥，将公钥部署到网页用户中
ssh-keygen -C 邮箱 -t rsa -N '' -f "/root/.ssh/id_rsa" -b 4096
ssh-agent	//密钥管理工具	
ssh-add	//添加到管理工具
如果遇到权限问题，将私钥权限改为600
删除已连接的远程仓库
git remote remove origin
连接远程仓库
git remote add origin git@192.168.4.1:nsd1809/core_py.git
######################################################################################################


Day02
以.py结尾的是python文件
1.通过解释器运行文件
python3 文件
2.在文件中声明解释器，赋予文件执行权限即可
书写python文件
cat << eof > hello.py
#!/usr/bin/env python3	//自动寻找python3解释器，也可以书写python3绝对路径
print("hello world!")
eof
chmod +x hello.py

python语法结构
1.缩进
首行以关键字开始，以冒号结束，之后的每一行都要有4个空格的缩进，直到代码结束
2.注释/换行
#注释内容
\换行，注意换行符必须是最后一个字符
3.同行多个语句(不推荐使用)
使用；号
4.帮助信息
help(关键字)
help(print)	//查看输出的帮助信息
print(value,...,sep=' ',end'\n',file=sys.stdout,flush=False)
value:任意输出的值
sep:两个值之间的字符默认是一个空格
end:最后一个字符，默认换行
help(input)	//查看输入帮助
input(prompt=None,\)
prompt:提示字符串，提示用户输入信息，所有返回值默认是字符类型

变量
变量名称约定
  -第一个字符只能是大小写字母或下划线
  -后续字符只能是大小写字母或下划线
  -区分大小写
推荐变量名
  -变量名全部采用小写字母
  -常量名采用大写字母
  -简短，有意义
  -多个单词间用下划线分隔
  -变量名用名词，函数名用谓词(动词+名词)
  -类名采用驼峰形式
python中变量不需要声明数据类型，变量的值是什么类型变量就是什么类型
声明变量一定要赋值，否则不能声明变量
支持增量赋值
a += 1 相当于 a = a + 1
不支持a++

运算符
算术运算符
+ - * / //(整除，舍弃小数位) % **(幂运算)
整数与浮点数进行运算，结果为浮点数
比较运算符
< <= > >= == != <>
逻辑运算符
and not or
and运算只要有一个条件False，结果就为False
or运算只要有一个条件True，结果就为True
not运算条件为True结果为False，条件为False结果为True
1<2 and 2>3 
############################################################################################
数据类型
1.数字
  -int：有符号整数
  -bool：布尔值(首字母必须大写)
    True：1  条件成立，存在
    False：0  条件不成立，不存在
  -float：浮点数
  -complex：复数
    1+2j
    2+43J
python默认以十进制数显示
数字以0b或0B开头表示2进制
数字以0o或0O开头表示为8进制
数字以0x或0X开头表示16进制

2.字符串
  python中引号之间的字符称为字符串
  python不区分单双引号，意义相同
  支持三引号，连续的三个单引或双引，可以包含特殊字符
  python不区分字符和字符串
字符串切片
  使用索引运算符[]和切片运算符[:]可得到子字符串
  第一个字符的索引是0，最后一个是-1
  子字符串包含切片中的起始下标，但不包含结束下标
字符串连接
  使用+号可以将多个字符串拼接在一起
  使用*号可以将一个字符串重复多次
字符串比较大小根据ascii码
'a' < 'b'
'ab' < 'ac'
'abc' < 'ac'
字符串比较运算时，按顺序从第一位开始比较，相同比下一位，比出结果后停止

列表和元组
容器 可以存放任意类型的数据
列表的表示方式[value，value，...],可以为空，表示空列表
使用in/not in 查看列表中是否有某一元素
list = [1,2,'a']
向列表末尾追加内容：list.append(value)
元组是静态的列表，一旦定义，不能改变
tuple = (1,2,'b')

字典
字典是由键-值对构成的，通过键取值，不支持下标操作
dict = {'tel':13011112222}
dict['tel']

数据类型比较
按存储模型分类
  -标量类型：数值，字符串
  -容器类型：列表，元组，字典
按更新模型分类
  -可变类型：列表，字典
  -不可变类型：数值，字符串，元组
按访问模型分类
  -直接访问：数值
  -顺序访问：列表，元组，字符串
  -映射访问：字典

if语句
语法结构
if expr:
    if_suite
else:
    else_suite
判断表达是expr的值非0或布尔值为True，执行if代码，否则执行else代码
expr可以是单独元素，也可以是条件表达式
单独元素值转换布尔值为False的：0,0.0,(0+0j),'',[],(),{}

三元运算符
x if expr else y	//如果expr条件成立，输出x，否则输出y

cat << eof > login2.py
#!/usr/bin/env python3
user=input('请输入用户名:')
passwd=input('请输入密码:')
if user == '' or passwd == '':
    print('请输入正确的用户和密码！')
    exit
elif user == 'bob' and passwd == '123456':
    print('Login successful')
else:
    print('Login inorrect')
eof
chmod +x login2.py
./login2.py


cat << eof > grade.py
#!/usr/bin/env python3
grade = int(input('请输入成绩：'))
if grade > 90:
    print('优秀！')
elif grade > 80:
    print('好！')
elif grade > 70:
    print('良！')
elif grade > 60:
    print('及格！')
else:
    print('你要努力了！')
eof
chmod +x grade.py
./grade.py

#剪刀石头布小游戏
import random	//导入随机模块
choice = ['剪刀','石头','布']
win = [['剪刀','布'],['石头','剪刀'],['布','石头']]
computer = random.choice(choice)
tmp = '''[0]剪刀
[1]石头
[2]布
请选择(0/1/2)：
'''
ind = int(input(tmp))
player = choice[ind]
print('computer choice:',computer,'player choice:',player)
if player == computer:
    print('平局！')
elif [player,computer] in win:
    print('You Win！')
else:
    print('You Lose！')

while循环
循环次数可以预知的情况下，建议采用for循环
循环次数未知的情况下，建议采用while循环
num = 2
print("%d"%num)

打印20以内的偶数
n = 1
while n <= 20:
    if n%2 == 0:
        print(n)
    n += 1

练习 要求用户输入用户名，如果用户名不是tom，则一直输入
方法一：
uname = input('请输入用户名')
while uname != 'tom':
    uname = input('请输入用户名')
方法二：
while 1:
    uname = input('请输入用户名')
    if uname == 'tom':
        break	//跳出当前循环，执行下条语句

break:跳出循环，执行下条语句
continue：跳过本次循环，进入下次循环
else：python中特有的，在循环结束后会执行else语句，break会跳过此处代码
while 1:
    代码
else:
    代码
################################################################################################

Day03
for循环语法结构
for 变量 in 可迭代对象:
    代码
for循环将可迭代对象中的值按顺序遍历给变量执行代码，直到结束，若后面有else语句，结束后会执行else中的代码
for循环中的变量结束后还是会存在的，后续使用尽量不要重名
注意：若可迭代对象为空，则不会创建变量
range函数：提供循环条件，range(start,end,step=1)，包含开始不包含结束

#九九乘法表
#range函数，顾头不顾尾，结尾+1
for i in range(1,10):
    for j in range(1,i+1):
        print('%sx%s=%s\t'%(j,i,j*i),end=' ')
        #print(str(j)+'x'+str(i)+'='+str(j*i)+'\t',end=' ')
        #print('{0}x{1}={2}\t'.format(j,i,(i*j)),end=' ')
    print()

列表解析（列表推倒式）
语法
[expr for 变量 in 可迭代对象]或	//expr可以和变量搭配使用
[expr for 变量 in 可迭代对象 if 条件表达式]
alist = [2+i for i in range(101) if i%2 == 0]

文件对象
文件打开的方法
open()方法
open(file,mode,buffering)打开指定文件
file：文件路径，mode：访问模式（默认以r模式访问），buffering：缓存（默认-1，使用系统默认缓存）
文件对象访问模式：
r：读 （文件不存在会报错）
w：写 （文件不存在会创建，文件存在会清空文件）
a：追加 （必要时创建文件）

r+：以读写模式打开（操作同r）
w+：以读写模式打开（操作同w）
a+：以读写模式打开（操作同a）

rb/wb/ab：以二进制模式打开

文件输入
read()读取文件内容
fobj = open('test.py','r')
data = fobj.read()	//不写默认读取全部内容，可以设置读取字节数read(5)
print(data)
当读取全部内容后，指针会指向文件末尾，再次读取文件则读不到任何数据
fobj.close()	//关闭文件对象

readline()读取文件光标开始到下一个换行之间的所有内容，即一行；也可以指定读取指定字节readline(5)
readlines()读取剩余所有行并把他们作为一个字符串列表返回

文件迭代
fobj = open('test.py')
for i in fobj:
    print(i)	//一行一行迭代

文件输出
write()
fobj.write('hello world\n')	//向文件写入内容，不会自动添加结束标志，需手工输入
fobj.writelines(['a\n','b\n'])	//支持字符串列表作为参数写入，也要手工输入结束符
fobj.flush()	//立即将缓存中的数据同步

操作文件
pycharm批量注释快捷键ctrl+/
with语句
with open('test.py') as f(别名):
    对文件的操作代码
print(f.closed)	//检测文件是否关闭，关闭返回True，否则False

seek(offset[,whence])	//移动文件指针到不同的位置
f.seek(0,0)	//将指针移动到开头
offset是相对于某个位置的偏移量
whence的值，0表示文件开头，1表示当前位置，2表示文件结尾
tell()	//返回当前文件指针的位置

标准文件（了解即可）
标准输入：一般是键盘，使用sys.stdin
标准输出：一般是显示器缓冲输出，使用sys.stdout
标准错误：一般是显示器的非缓冲输出，使用sys.stderr
使用需导入sys模块
sys.stdout.write('hello')	//等同于print('hello')
sys.stdin.readline()	//等同于input()

模拟cp操作
#打开/bin/ls 作为源文件
f1 = open('/bin/ls','rb')
#打开/root/ls 作为目标文件
f2 = open('/root/ll','wb')
#重复的从源文件读取内容到目标文件，建议一点一点读
while True:
    data = f1.read(4096)	//每次读取4096字节
    #if data == '':
    if not data:	//判断数据为空，退出循环
        break
    f2.write(data)
#关闭文件
f1.close()
f2.close()


函数
简化程序，点少代码的重复，通常代表某一种功能
函数语法
def func_name(arguments):
    '文档字符串'	//描述函数的功能及使用方式
    代码
def say():	//定义函数
    print('hello')
say()		//调用函数
#拷贝函数
def cp(src,dst):
    '''cp(src,dst)
    src 源文件路径
    dst 目标文件路径'''
    f1 = open(src,'rb')
    f2 = open(dst,'wb')
    while True:
        data = f1.read(4096)
        if not data:
            break
        f2.write(data)
    f1.close()
    f2.close()

函数参数
#在定义函数时的参数称为形参
def mysum(num1,num2):	
    return num1 + num2	//return指定函数返回结果
#调用函数，传递的参数称为实参
print(mysum(5,6))	

位置参数
需要使用sys模块的argv列表接收
import sys
print(sys.argv) #位置参数列表,将所有位置参数保存在列表中
print(sys.argv[1])	//打印列表中下标为1的参数

默认参数
def mysum(num=10):	//定义默认参数num=10
    print('*'*num)
mysum()	//没有实参时，使用默认参数10

#使用python书写拷贝功能函数
#!/usr/bin/env python3
import sys
def cp(src,dst):
    '''cp(src,dst)
    src 源文件路径
    dst 目标文件路径'''
    f1 = open(src,'rb')
    f2 = open(dst,'wb')
    while True:
        data = f1.read(4096)
        if not data:
            break
        f2.write(data)
    f1.close()
    f2.close()
cp(sys.argv[1],sys.argv[2])
#需要在终端运行
cp src dst



