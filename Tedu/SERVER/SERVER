Day01

为虚拟机A与虚拟机B搭建Yum仓库
服务端:虚拟机A  
           1.搭建FTP服务   2.共享光盘所有内容

   1)图形将光盘内容,放入虚拟光驱中
   2)安装vsftpd软件包
   3)利用FTP共享光盘所有内容,默认共享路径下/var/ftp
   4)重起vsftpd服务验证
 客户端:虚拟机B
[root@pc207 ~]# vim /etc/yum.repos.d/rhel7.repo
 [rhel7]
 name=rhel7
 baseurl=ftp://192.168.4.7/rhel7
 enabled=1
 gpgcheck=0

真机上搭建服务端 ：
  1.众多的软件包   2.仓库数据文件  3.搭建FTP服务共享内容
  1）搭建FTP服务
  2)挂载光盘内容到/var/ftp/rhel7
  3)最终测试

扩展的几个应用
目录结构
• 认识Linux的目录层次:
– man hier

常见一级目录的用途
 /boot 存放系统引导必需的文件,包括内核、启动配置
 /bin、/sbin 存放各种命令程序
 /dev 存放硬盘、键盘、鼠标、光驱等各种设备文件
 /etc 存放Linux系统及各种程序的配置文件
 /root、/home/用户名 分别是管理员root、普通用户的默认家目录
 /var 存放日志文件、邮箱目录等经常变化的文件
 /proc 存放内存中的映射数据,不占用磁盘
 /tmp 存放系统运行过程中使用的一些临时文件


权限的数值表示
• 权限的数值化
– 基本权限:r = 4,w = 2,x = 1
– 附加权限:SUID = 4,SGID = 2,Sticky Bit = 1
• 采用数值形式设置权限
– chmod [-R] nnn 文档...
– chmod [-R] xnnn 文档..

历史命令
• 管理/调用曾经执行过的命令
– history:查看历史命令列表
– history -c:清空历史命令
– !n:执行命令历史中的第n条命令
– !str:执行最近一次以str开头的历史命令
调整历史命令的数量
[root@svr7 ~]# vim /etc/profile
HISTSIZE=1000

自定义Yum仓库

 1.准备从互联网下载的软件包
    真机的数据传递到虚拟机A中
 2.在虚拟机A中验证
 3.进行tar解包
 4.生成仓库数据文件
 5.书写yum客户端配置文件

• du,统计文件的占用空间
– du [选项]... [目录或文件]...
– -s:只统计每个参数所占用的总空间大小
– -h:提供易读容量单位(K、M等)

• date,查看/调整系统日期时间
– date +%F、date +%R
– date +"%Y-%m-%d %H:%M:%S"
– date -s "yyyy-mm-dd HH:MM:SS"

vim编辑技巧

命令模式操作

	Home 键 或 ^、数字 0          跳转到行首
	End 键 或“$”键 		  跳转到行尾
	1G 或 gg 			 跳转到文件的首行
	G 					 跳转到文件的末尾行

	复制 yy、#yy 			复制光标处的一行、#行
	粘贴 p、P 			粘贴到光标处之后、之前
	x 或 Delete键 		删除光标处的单个字符
	dd、#dd 				删除光标处的一行、#行
	d^ 					从光标处之前删除至行首
	d$ 					从光标处删除到行尾

	/word 		向后查找字符串“word”
	n、N 		跳至后/前一个结果
	u 			撤销最近的一次操作
	Ctrl + r 	取消前一次撤销操作
	ZZ(大写) 	保存修改并退出

末行模式操作
        :q!                  放弃已有更改后强制退出
        :wq 或 :x             保存已有修改后退出
        :r /etc/filesystems  读入其他文件内容
字符串替换
	:s/root/abc        替换当前行第一个“root”
	:s/root/abc/g      替换当前行所有的“root”
	:1,10 s/root/abc/g 替换第1-10行所有的“root”
	:% s/root/abc/g    替换文件内所有的“root
开关参数的控制
	:set nu|nonu    显示/不显示行号
	:set ai|noai    启用/关闭自动缩进
补充:vim 缓存文件的产生

     发现交换文件,恢复正常 删除交换文件

源码编译安装
• 主要优点
– 获得软件的最新版,及时修复bug
– 软件功能可按需选择/定制,有更多软件可供选择
– 源码包适用各种平台

 源码包----gcc make---->可以执行的程序------------>运行安装

步骤1:安装gcc与make
步骤2:tar解包,释放源代码至指定目录
步骤3:  ./configure 配置,指定安装目录/功能模块等选项
                                 作用1:检测系统是否安装gcc与make
                                 作用2:指定安装目录/功能
步骤4:make 编译,生成可执行的二进制程序文件
步骤5:make install 安装,将编译好的文件复制到安装目录

实用小命令工具(续2)
• ln,创建软连接
– 软连接 --> 原始文档 --> i节点 --> 文档数据
– ln -s 原始文件或目录   软连接文件

   若原始文件或目录被删除,连接文件将失效
   软连接可存放在不同分区/文件系统

• ln,创建硬连接
– 硬连接 --> i节点 --> 文档数据
– ln 原始文件 硬连接文件

  若原始文件被删除,连接文件仍可用
  硬连接与原始文件必须在同一分区/文件系统

制作快捷方式:
[root@svr7 /]# ln -s /路径/源文件   /路径/快捷方式

i节点:硬盘存储空间的一个编号
 读取数据的过程:   首先找到源文件----->i节点编号   
                              通过编号----->存储的区域   取得数据


Day02

DNS服务器的功能
– 正向解析:根据注册的域名查找其对应的IP地址
– 反向解析:根据IP地址查找对应的注册域名,不常用
  所有完整的域名都必须以点结尾   

            根域名:  .  
顶级域名:   .cn    .us   .jp   .kr  .tw  .hk ......
二级域名:   .com.cn   .net.cn  .org.cn  .tedu.cn    
三级域名:   .nb.com.cn  .haxi.com.cn  .xixi.com.cn  
完整域名(FQDN): www.nb.com.cn  ftp.nb.com.cn 

• BIND服务器端程序     
– 系统服务:named
– 默认端口:TCP/UDP 53
– 运行时的虚拟根环境:/var/named/chroot/

• 主配置文件:/etc/named.conf    指定本机负责解析的域名
• 地址库文件:/var/named/        完整的域名与IP对应关系    

• NS,域名服务器(Name Server)记录
• A,地址(Address)记录,仅用于正向解析区域

搭建基本DNS服务

虚拟机A:
1.安装软件包
2.修改配置文件/etc/named.conf
3.创建地址库文件/var/named/tedu.cn.zone
4.重起named服务
客户端验证
1.指定DNS服务器位置
2.域名解析测试

多区域的DNS服务器
虚拟机A:
1.修改配置文件/etc/named.conf  
2.创建地址库文件/var/named/qq.com.zone
3.重起named服务
客户端验证
1.指定DNS服务器位置
2.域名解析测试

特殊的解析记录,以tedu.cn.zone为例
一 DNS的负载均衡,轮询的相同解析记录(了解)
二 泛域名解析		*
三 解析记录的别名(了解)	CNAME
四   有规律的泛域名解析	内置函数: $GENERATE   产生连续的数字

DNS服务器常见的资源解析记录都有那些?
  NS解析记录    A解析记录     CNAME解析记录

DNS子域授权 ,qq.com域名为例
   
            父域:www.qq.com

            子域:www.bj.qq.com

            父域的DNS服务器为虚拟机A,负责解析qq.com       
  
            子域的DNS服务器为虚拟机B,负责解析bj.qq.com 

虚拟机B
1.安装软件包
2.修改配置文件/etc/named.conf
3.创建地址库文件/var/named/bj.qq.com.zone
4.重起named服务
子域授权
  通过父域的DNS服务器为虚拟机A,能够解析www.bj.qq.com
虚拟机A:
[root@svr7 /]# vim /var/named/qq.com.zone
 qq.com.     NS  svr7
 bj.qq.com.  NS  pc207
 svr7        A   192.168.4.7
 pc207       A   192.168.4.207
重起验证

递归查询: 
     客户端向首选DNS服务器寻求解析,首选DNS服务器与其他DNS服务器交互,最终将解析结果,带回来的过程
	recursion  no;    #禁止递归
迭代查询：首选DNS服务器与其他DNS服务器交互

直接起到DNS解析的功能(只能对本机解析) 
  /etc/hosts 主机名映射文件（本地主机名与IP地址对应关系）
	[root@svr7 /]# vim /etc/hosts
	[root@svr7 /]# tail -1 /etc/hosts
	192.168.4.110   www.360.com
客户端解析域名顺序：
      1./etc/hosts
      2./etc/resolv.conf
        3.找寻DNS服务器

缓存DNS: 利用内存进行缓存解析记录，加速解析
真机搭建缓存DNS服务器
1.搭建Yum仓库
2.查看达内   内网DNS服务器地址
3.修改DNS服务器主配置文件，指定转发给内网DNS服务器
	  options {
           directory       "/var/named";
           forwarders   {  172.40.1.10;  };
   };
4. 重起named服务
5.在虚拟机上验证

Day03

Split分离解析(视图解析)          

什么是分离解析
• 当收到客户机的DNS查询请求的时候
 – 能够区分客户机的来源地址
 – 为不同类别的客户机提供不同的解析结果(IP地址)
 – 为不同的客户端，提供最近最适合的服务器
• 根据源地址集合将客户机分类
– 不同客户机获得不同结果(待遇有差别)

注意事项：
1.客户端必须找到，自己的分类，需要管理员分类合理
2.view客户端由上及下，匹配及停止
3.所有的zone都必须在view中
 acl地址列表
• 为大批量的客户机地址建立列表
补充:多区域的分离解析
  每一个view中,zone的个数保持一致,域名的个数保持一致

RAID磁盘阵列

RAID阵列概述
• 廉价冗余磁盘阵列
– Redundant Arrays of Inexpensive Disks
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘

– 阵列的价值:提升I/O效率、硬件级别的数据冗余
– 不同RAID级别的功能、特性各不相同


• RAID 0,条带模式
– 同一个文档分散存放在不同磁盘
– 并行写入以提高效率
– 至少由两块磁盘组成


• RAID 1,镜像模式
– 一个文档复制成多份,分别写入不同磁盘
– 多份拷贝提高可靠性,效率无提升
– 至少由两块磁盘组成


• RAID5,高性价比模式
– 相当于RAID0和RAID1的折中方案
– 需要至少一块磁盘的容量来存放校验数据
– 至少由三块磁盘组成

• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少由四块磁盘组成

RAID0/1/10
• RAID 0+1/RAID 1+0
– 整合RAID 0、RAID 1的优势
– 并行存取提高效率、镜像写入提高可靠性
– 至少由四块磁盘组成

进程管理

     程序：静态的代码，仅占硬盘空间

     进程：动态的代码，占用CPU、内存资源

   PID：进程的编号  
 
      父进程/子进程

查看进程树
• pstree — Processes Tree
– 格式:pstree [选项] [PID或用户名]

• 常用命令选项
– -a:显示完整的命令行
– -p:列出对应PID编号
  systemd:上帝进程是所有进程的父进程  PID编号为1

查看进程快照
• ps — Processes Snapshot
– 格式:ps [选项]...

• 常用命令选项
– aux:显示当前终端所有进程(a)、当前用户在所有
终端下的进程(x), 以用户格式输出(u)
– -elf:显示系统内所有进程(-e)、以长格式输出(-l)
信息、包括最完整的进程信息(-f)

  ps  aux:输出进程信息非常详细
     – 列出正在运行的所有进程

  ps  -elf:输出进程信息比较详细，有该进程的父进程信息
     – 列出正在运行的所有进程

   PPID:父进程的PID号
补充： wc统计 wc -l

进程动态排名
• top 交互式工具
– 格式:top [-d 刷新秒数] [-U 用户名]

   按键盘上  P（大写）按照CPU排序
   按键盘上  M（大写）按照内存排序

检索进程
• pgrep — Process Grep
– 用途:pgrep [选项]... 查询条件

• 常用命令选项
– -l:输出进程名,而不仅仅是 PID
– -U:检索指定用户的进程
– -t:检索指定终端的进程
– -x:精确匹配完整的进程名

who  #当前系统有哪些用户正在登陆v

控制进程
• 后台启动
– 在命令行末尾添加“&”符号,(运行并转入后台)
• Ctrl + z 组合键
– 挂起当前进程(暂停并转入后台)
• jobs 命令
– 查看后台任务列表
• fg 命令
– 将后台任务恢复到前台运行
• bg 命令
– 激活后台被挂起的任务

杀死进程
• 干掉进程的不同方法
– Ctrl+c 组合键,中断当前命令程序
– kill [-9] PID... 
– killall [-9] 进程名...
– pkill 查找条件

日志概述

• 系统和程序的“日记本”
– 记录系统、程序运行中发生的各种事件
– 通过查看日志,了解及排除故障
– 信息安全控制的“依据

内核及系统日志
• 由系统服务rsyslog统一记录/管理

• 常见的日志文件
  /etc/rsyslog.conf  记录下列所有日志的路径
  /var/log/messages  记录内核消息、各种服务的公共消息
  /var/log/dmesg     记录系统启动过程的各种消息
  /var/log/cron      记录与cron计划任务相关的消息
  /var/log/maillog   记录邮件收发相关的消息
  /var/log/secure    记录与访问限制相关的安全消息

日志分析
     tailf:实时跟踪日志

• 通用分析工具
– tail、tailf、less、grep等文本浏览/检索命令
– awk、sed等格式化过滤工具

用户登录分析
• users、who、w 命令
– 查看已登录的用户信息,详细度不同

• last、lastb 命令
– 查看最近登录成功/失败的用户信息

日志消息的优先级
• Linux内核定义的事件紧急程度        
– 分为 0~7 共8种优先级别
– 其数值越小,表示对应事件越紧急/重要
 
  0  EMERG（紧急）        会导致主机系统不可用的情况
  1  ALERT（警告）         必须马上采取措施解决的问题
  2  CRIT（严重）	        比较严重的情况
  3  ERR（错误）	       运行出现错误
  4  WARNING（提醒）    可能会影响系统功能的事件
  5  NOTICE（注意）      不会影响系统但值得注意
  6  INFO（信息）	       一般信息
  7  DEBUG（调试）       程序或系统调试信息等

使用journalctl工具
• 提取由 systemd-journal 服务搜集的日志
– 主要包括内核/系统日志、服务日志

• 常见用法
– journalctl | grep 关键词
– journalctl -u 服务名   [-p 优先级]
– journalctl -n 消息条数
– journalctl --since="yyyy-mm-dd HH:MM:SS" --
until="yyyy-mm-dd HH:MM:SS"

systemctl控制

• Linux系统和服务管理器
– 是内核引导之后加载的第一个初始化进程(PID=1)
– 负责掌控整个Linux的运行/服务资源组合

对于服务的管理
 systemctl restart  服务名   #重起服务
 systemctl start  服务名       #开启服务
 systemctl stop  服务名         #停止服务
 systemctl status  服务名     #查看服务当前的状态
 
 systemctl enable  服务名      #设置服务开机自启动
 systemctl disable  服务名    #设置服务不开机自启动
 systemctl enable  服务名 

systemd
• 一个更高效的系统&服务管理器
– 开机服务并行启动,各系统服务间的精确依赖

– 服务目录:/lib/systemd/system/

RHEL6:运行级别   200 

         0：关机     0
         1：单用户模式（基本功能的实现，破解Linux密码）50 
	 2：多用户字符界面（不支持网络） 80
	 3：多用户字符界面（支持网络）服务器默认的运行级别  100
	 4：未定义
	 5：图形界面    190
	 6：重起   0
   
    切换运行级别：init  数字    

RHEL7：运行模式

   字符模式：multi-user.target
   图形模式：graphical.target
设置永久策略，每次开机自动进入graphical.target
# systemctl set-default graphical.target 

Day04

网络装机概述

网络装机的优势
• 规模化:同时装配多台主机
• 自动化:装系统、配置各种服务
• 远程实现:不需要光盘、U盘等物理安装介质

• 需要哪些服务组件?
– DHCP服务,分配IP地址、定位引导程序
– TFTP服务,提供引导程序下载
– HTTP服务,提供yum安装源

一、搭建配置DHCP服务
1.指定写一个服务器地址
2.重起服务
二、配置TFTP服务
1.安装tftp-server软件
2.重起tftp服务
3.部署pxelinux.0文件
4.部署菜单文件
5.部署图形的模块(vesamenu.c32)与背景图片(splash.png)
6.部署 启动内核（vmlinuz） 与  驱动程序（initrd.img）
7.修改菜单文件/var/lib/tftpboot/pxelinux.cfg/default
三、搭建httpd服务，共享光盘所有内容
1.安装软件包
2.重起服务
3.共享光盘所有内容
4.访问测试
四、部署无人值守安装，生成应答文件
1.通过图形的system-config-kickstart软件可以生成
2.运行图形的system-config-kickstart进行图形配置
五、应答文件
修改菜单文件，指定应答文件位置

自我总结：
pxe自动装机
 一、搭建dhcp服务
	1.安装软件包dhcpd
	2.修改配置文件/etc/dhcp/dhcpd.conf
	3.指定下一个服务器地址，配置文件
		next-server 下一个服务器地址;
		filename “pxelinux.0";		
	#网卡引导文件，说明书，二进制文件安装软件，会自动生成pxelinux.0文件
	4.重起服务
 二、配置TFTP服务
  tftp：简单的文件传输协议
   默认端口：69
   默认共享路径：/var/lib/tftpboot
	1.安装软件包tftp-server
	2.重起tftp服务
	3.部署pxelinux.0
		查询文件/命令所需软件包：yum provides 文件/命令名路径
		查询软件包安装的东西：rpm -ql 软件名
	4.部署菜单文件
	  默认存放路径:/var/lib/tftpboot/pxelinux.cfg/
	   pxelinux.0要求默认路径/var/lib/tftpboot/pxelinux.cfg/default(文件名)
	5.部署图形的模块与背景图片
	6.部署启动内核与驱动程序
	7.修改菜单文件/var/lib/tftpboot/pxelinux.cfg/default

总结开机顺序：	1.dhcp-->ip地址、next-server、filename
		2.tftp-->pxeliunx.0
		3.pxeliunx.0-->default
		4.default-->目录文件
	initrd.img/pxelinux.0/pxelinux.cfg/splash.png/vesamenu.c32/vmlinuz
	ks=http://192.168.4.7/ks.cfg
		5.ks-->--url=http://192.168.4.7/ks.cfg
三、搭建httpd服务，共享光盘所有内容
	1.装包
	2.启服务
	3.将光盘内容放入/var/www/html下
	4.访问测试
四、部署无人值守安装，生成应答文件
  	1.通过图形的system-config-kickstart软件生成
	检测“软件包选择”是否可以选择
	需要光盘的源的yum仓库支持，要求“仓库表示必须为[development]
五、应答文件ks.cfg
	利用httpd服务，将应答文件共享出去
	修改菜单文件，指定应答文件位置

部署多版本pxe，内核，驱动，ks文件不同，其余一式双份


Day05

rsync同步操作

• 命令用法
– rsync [选项...] 源目录      目标目录

• 同步与复制的差异
– 复制:完全拷贝源到目标
– 同步:增量拷贝,只传输变化过的数据

• 本地同步
– rsync [选项...] 本地目录1   本地目录2
– rsync [选项...] 本地目录1/   本地目录2
• rsync操作选项
 – -n:测试同步过程,不做实际修改
 – --delete:删除目标文件夹内多余的文档
 – -a:归档模式,相当于-rlptgoD
 – -v:显示详细操作信息
 – -z:传输过程中启用压缩/解压

rsync+SSH同步（远程同步）

• 与远程的 SSH目录保持同步
– 下行:rsync [...]  user@host:远程目录     本地目录
– 上行:rsync [...]  本地目录        user@host:远程目录

实时同步
一、部署公钥  私钥，实现远程ssh无密码验证
虚拟机A：
1.生成公钥  私钥：ssh-keygen
2.传递公钥 到虚拟机B：ssh-copy-id
3.虚拟机B：查看
4.虚拟机A：测试无密码同步
二、监控目录内容的变化
• Linux内核的 inotify 机制
– 提供事件响应式的文件系统通知机制
– 安装 inotify-tools 控制工具可调用此机制实现监控
1.真机传递tools.tar.gz到虚拟机A
2.虚拟机A验证：
3.安装源码包
	步骤1:安装gcc与make
	步骤2:  ./configure 配置,指定安装目录/功能模块等选项
	 # cd  /root/inotify-tools-3.13/
	 # ./configure 
	步骤4:make 编译,生成可执行的二进制程序文件
	 # make
	步骤5:make install 安装,将编译好的文件复制到安装目录

inotifywait监控
• 基本用法
– inotifywait [选项] 目标文件夹

• 常用命令选项
– -m,持续监控(捕获一个事件后不退出)
– -r,递归监控、包括子目录及文件
– -q,减少屏幕输出信息
– -e,指定监视的 modify、move、create、delete、attrib 等事件类别

三、书写Shell脚本完成，实时同步

       死循环： while

     while  [条件]
     do
              重复执行的代码
     done

IPv6地址配置

IPv4:
由32个二进制组成  最终以  点  分隔 4部分  每部分用1个十进制数表示

IPv6:
由128个二进制组成  最终以 冒号 分隔 8部分 每部分用4个16进制数表示
– 每段内连续的前置 0 可省略、连续的多个 : 可简化为 ::

  子网掩码均为：64位网络位  64位主机位

umask系统环境变量：0022  linux系统最大权限：777    所有默认权限是755
第一位0是特殊权限，默认权限=最大权限-系统定义环境变量值

PATH变量：提供命令的搜寻路径

zip压缩与解压所（跨平台）

  压缩：zip -r（压缩目录是需加） /路径/压缩包名.zip  被压缩的源文档
  解压缩：unzip /路径/压缩包名.zip -d 指定释放位置












